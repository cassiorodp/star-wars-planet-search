{"version":3,"sources":["images/pixel-gif.gif","context/TableContext.js","helpers/index.js","components/FilterForm.js","components/SelectedFilters.js","components/TableContent.js","components/Table.js","context/Provider.js","App.js","index.js"],"names":["module","exports","TableContext","createContext","columnFilter","columnSort","FilterForm","useContext","handleFilterByName","handleFilterByNumericValues","handleSortPlanets","filterByNumericValues","filter","filters","useState","column","setColumn","comparison","setComparison","value","setValue","sortColumn","setSortColumn","order","setOrder","columnOptions","setColumnOptions","columnSortOptions","setColumnSortOptions","useEffect","numericValuesColumns","map","option","includes","className","src","pixelGif","alt","htmlFor","data-testid","onChange","e","target","type","id","placeholder","colum","key","required","onClick","name","defaultChecked","SelectedFilters","handleRemoveFilter","TableContent","results","data","planets","setPlanets","planetsMovies","setPlanetsMovies","list","planet","films","endpoint","fetch","then","response","json","Promise","all","item","listMovie","allListMovies","orderedPlanets","filteredPlanets","sort","a","b","columnA","columnB","Number","isNaN","orderPlanets","planetsByName","length","forEach","parseInt","filterPlanetsByNumericValue","filterName","filterByName","toLowerCase","filterPlanetsByName","Object","keys","info","index","plantetInfos","entries","console","log","film","title","Table","loading","Provider","children","count","next","previous","setData","setLoading","setFilter","residents","created","edited","url","fetchPlanets","context","newName","removeFilterColumn","removedFilter","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b52a4b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pixel-gif.833dad69.gif\";","import { createContext } from 'react';\n\nconst TableContext = createContext();\n\nexport default TableContext;\n","export const columnFilter = [\n  'population',\n  'orbital_period',\n  'diameter',\n  'rotation_period',\n  'surface_water'];\nexport const columnSort = [\n  'name',\n  'terrain',\n  'gravity',\n  'climate',\n  'population',\n  'orbital_period',\n  'diameter',\n  'rotation_period',\n  'surface_water'];\n","import React, { useContext, useEffect, useState } from 'react';\nimport TableContext from '../context/TableContext';\nimport { columnFilter, columnSort } from '../helpers';\nimport pixelGif from '../images/pixel-gif.gif';\n\nimport '../styles/filterForm.css';\n\nfunction FilterForm() {\n  const {\n    handleFilterByName,\n    handleFilterByNumericValues,\n    handleSortPlanets,\n    filter: { filters: { filterByNumericValues } } } = useContext(TableContext);\n\n  const [column, setColumn] = useState('population');\n  const [comparison, setComparison] = useState('bigger then');\n  const [value, setValue] = useState('0');\n  const [sortColumn, setSortColumn] = useState('name');\n  const [order, setOrder] = useState('ASC');\n  const [columnOptions, setColumnOptions] = useState(columnFilter);\n  const [columnSortOptions, setColumnSortOptions] = useState(columnSort);\n\n  const filteredColumn = () => {\n    const numericValuesColumns = filterByNumericValues\n      .map((filter) => filter.column);\n    setColumnOptions(columnFilter\n      .filter((option) => !numericValuesColumns.includes(option)));\n    setColumnSortOptions(columnSort\n      .filter((option) => !numericValuesColumns.includes(option)));\n  };\n  useEffect(filteredColumn, [filterByNumericValues]);\n\n  return (\n    <section className=\"main-container\">\n      <img src={ pixelGif } alt=\"millenium falcon gif\" />\n      <p><i>Lets go, Chewie</i></p>\n      <form className=\"form-container\">\n        <label htmlFor=\"planet-name\">\n          Name:\n          <input\n            data-testid=\"name-filter\"\n            onChange={ (e) => handleFilterByName(e.target.value) }\n            type=\"text\"\n            id=\"planet-name\"\n            placeholder=\"Eg: Tatooine\"\n          />\n        </label>\n        <div>\n          <label htmlFor=\"column-filter\">\n            Filter by column:\n            <select\n              id=\"column-filter\"\n              value={ column }\n              data-testid=\"column-filter\"\n              onChange={ (e) => setColumn(e.target.value) }\n            >\n              {columnOptions\n                .map((colum) => <option value={ colum } key={ colum }>{colum}</option>)}\n            </select>\n          </label>\n          <select\n            value={ comparison }\n            data-testid=\"comparison-filter\"\n            onChange={ (e) => setComparison(e.target.value) }\n          >\n            <option value=\"bigger then\">bigger then</option>\n            <option value=\"less then\">less then</option>\n            <option value=\"equal to\">equal to</option>\n          </select>\n          <input\n            type=\"number\"\n            required\n            data-testid=\"value-filter\"\n            onChange={ (e) => setValue(e.target.value) }\n          />\n          <button\n            onClick={ () => handleFilterByNumericValues(column, comparison, value) }\n            type=\"button\"\n            data-testid=\"button-filter\"\n          >\n            Filter!\n          </button>\n        </div>\n        <div>\n          <label htmlFor=\"column-sort\">\n            Sort by column:\n            <select\n              data-testid=\"column-sort\"\n              onChange={ (e) => setSortColumn(e.target.value) }\n            >\n              {columnSortOptions\n                .map((colum) => <option value={ colum } key={ colum }>{colum}</option>)}\n            </select>\n          </label>\n          <label htmlFor=\"upward\">\n            Upward:\n            <input\n              data-testid=\"column-sort-input-asc\"\n              id=\"upward\"\n              type=\"radio\"\n              name=\"order\"\n              value=\"ASC\"\n              defaultChecked\n              onClick={ (e) => setOrder(e.target.value) }\n            />\n          </label>\n          <label htmlFor=\"downward\">\n            Downward:\n            <input\n              data-testid=\"column-sort-input-desc\"\n              id=\"downward\"\n              type=\"radio\"\n              name=\"order\"\n              value=\"DESC\"\n              onClick={ (e) => setOrder(e.target.value) }\n            />\n          </label>\n          <button\n            onClick={ () => handleSortPlanets(sortColumn, order) }\n            data-testid=\"column-sort-button\"\n            type=\"button\"\n          >\n            Sort!\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n}\n\nexport default FilterForm;\n","import React, { useContext } from 'react';\nimport TableContext from '../context/TableContext';\n\nimport '../styles/selectedFilters.css';\n\nfunction SelectedFilters() {\n  const {\n    filter:\n    { filters: { filterByNumericValues } },\n    handleRemoveFilter } = useContext(TableContext);\n\n  const renderSelectedFilters = () => (\n    <>\n      {filterByNumericValues\n        .map(({ comparison, column, value }) => (\n          <div className=\"selected-filter\" key={ column } data-testid=\"filter\">\n            <p>{`Column: ${column}`}</p>\n            <p>{`Comparison: ${comparison}`}</p>\n            <p>{`Value: ${value}`}</p>\n            <button\n              onClick={ () => handleRemoveFilter(column) }\n              type=\"button\"\n            >\n              X\n            </button>\n          </div>\n        ))}\n    </>\n  );\n\n  return (\n    <div>\n      {renderSelectedFilters()}\n    </div>\n  );\n}\n\nexport default SelectedFilters;\n","import React, { useContext, useEffect, useState } from 'react';\nimport TableContext from '../context/TableContext';\n\nimport '../styles/tableContent.css';\n\nfunction TableContent() {\n  const { data: { results }, filter } = useContext(TableContext);\n\n  const [planets, setPlanets] = useState([]);\n\n  const [planetsMovies, setPlanetsMovies] = useState([]);\n\n  useEffect(() => {\n    const list = planets.map((planet) => planet.films.map((endpoint) => fetch(endpoint)\n      .then((response) => response.json())\n      .then((data) => data)));\n    Promise.all(\n      list.map((item) => Promise.all(item).then((listMovie) => listMovie)),\n    ).then((allListMovies) => setPlanetsMovies(allListMovies));\n  }, [planets]);\n\n  // Filter Planets by Name\n  const filterPlanetsByName = () => {\n    const { filters: { filterByName: { name: filterName } } } = filter;\n    const planetsFilterByName = results\n      .filter(({ name }) => name.toLowerCase().includes(filterName));\n    return planetsFilterByName;\n  };\n\n  // Filter Planets by Numeric Value\n  const filterPlanetsByNumericValue = (planetsByName) => {\n    const { filters: { filterByNumericValues } } = filter;\n    let filteredPlanets = [];\n    if (filterByNumericValues.length) {\n      filterByNumericValues.forEach(({ comparison, column, value }) => {\n        if (comparison === 'bigger then') {\n          filteredPlanets = planetsByName\n            .filter((planet) => parseInt(planet[column], 10) > parseInt(value, 10));\n        }\n        if (comparison === 'less then') {\n          filteredPlanets = planetsByName\n            .filter((planet) => parseInt(planet[column], 10) < parseInt(value, 10));\n        }\n        if (comparison === 'equal to') {\n          filteredPlanets = planetsByName\n            .filter((planet) => parseInt(planet[column], 10) === parseInt(value, 10));\n        }\n      });\n      return filteredPlanets;\n    }\n    filteredPlanets = planetsByName;\n    return filteredPlanets;\n  };\n\n  const orderPlanets = (filteredPlanets) => {\n    const { filters: { order: { column, sort } } } = filter;\n    // Source: Murilo Rainho repository\n    const sortedPlanets = filteredPlanets.sort((a, b) => {\n      let columnA = a[column];\n      let columnB = b[column];\n      if (!Number.isNaN(Number(columnA))) columnA = Number(columnA);\n      if (!Number.isNaN(Number(columnB))) columnB = Number(columnB);\n      if (columnA > columnB) {\n        return sort === 'ASC' ? 1 : Number('-1');\n      } if (columnB > columnA) {\n        return sort === 'ASC' ? Number('-1') : 1;\n      }\n      return 0;\n    });\n    return sortedPlanets;\n  };\n\n  // Order filters\n  const orderFilters = () => {\n    const filteredByName = filterPlanetsByName();\n    const filteredByNumericValue = filterPlanetsByNumericValue(filteredByName);\n    const orderedPlanets = orderPlanets(filteredByNumericValue);\n    setPlanets(orderedPlanets);\n  };\n\n  useEffect(orderFilters, [filter]);\n\n  // const renderPlanetRow = () => planets.map((planet) => {\n  //   console.log(planet, 'planet');\n  //   console.log(planet.films, 'planet films');\n  //   const plantetInfos = Object.values(planet);\n  //   return (\n  //     <tr key={ planet.name }>\n  //       {plantetInfos.map((info) => <td key={ info }>{info}</td>)}\n  //     </tr>);\n  // });\n\n  const renderPlanetRow = () => planets.map((planet, index) => {\n    const plantetInfos = Object.entries(planet);\n    console.log(plantetInfos);\n    return (\n      <tr key={ planet.name }>\n        {plantetInfos.map(([key, value]) => {\n          if (key === 'films' && planetsMovies.length) {\n            return (\n              <td key={ key }>\n                {planetsMovies[index].map((film) => (\n                  <p key={ film.title }>{film.title}</p>\n                ))}\n              </td>\n            );\n          }\n          return <td key={ key }>{value}</td>;\n        })}\n      </tr>\n    );\n  });\n\n  return (\n    <table className=\"planets-table\">\n      <thead>\n        <tr>\n          {Object.keys(results[0]).map((info) => <th key={ info }>{info}</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        {renderPlanetRow()}\n      </tbody>\n    </table>\n  );\n}\n\nexport default TableContent;\n","import React, { useContext } from 'react';\nimport TableContext from '../context/TableContext';\nimport FilterForm from './FilterForm';\nimport SelectedFilters from './SelectedFilters';\nimport TableContent from './TableContent';\n\nfunction Table() {\n  const {\n    data: { results },\n    loading,\n  } = useContext(TableContext);\n\n  return (\n    <div>\n      {loading && <h1>Loading...</h1>}\n      {results[0] && (\n        <>\n          <FilterForm />\n          <SelectedFilters />\n          <TableContent />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport tableContext from './TableContext';\n\nfunction Provider({ children }) {\n  const [data, setData] = useState({\n    count: 0,\n    next: '',\n    previous: null,\n    results: [],\n  });\n\n  const [loading, setLoading] = useState(true);\n\n  const [filter, setFilter] = useState({\n    filters: {\n      filterByName: {\n        name: '',\n      },\n      filterByNumericValues: [],\n      order: {\n        column: 'name',\n        sort: 'ASC',\n      },\n    },\n  });\n\n  const handleFilterByName = (newName) => {\n    const { filters: { filterByName, filterByNumericValues, order } } = filter;\n    setFilter({\n      ...filter,\n      filters:\n      { filterByName:\n        { ...filterByName, name: newName },\n      filterByNumericValues: [...filterByNumericValues],\n      order: { ...order },\n      },\n    });\n  };\n\n  const handleFilterByNumericValues = (column, comparison, value) => {\n    const { filters: { filterByName, filterByNumericValues, order } } = filter;\n    setFilter({\n      ...filter,\n      filters:\n      { filterByName:\n        { ...filterByName },\n      filterByNumericValues:\n    [...filterByNumericValues, { column, comparison, value }],\n      order: { ...order },\n      } });\n  };\n\n  const handleRemoveFilter = (removeFilterColumn) => {\n    const { filters: { filterByName, filterByNumericValues, order } } = filter;\n    const removedFilter = filterByNumericValues\n      .filter(({ column }) => removeFilterColumn !== column);\n    setFilter({\n      ...filter,\n      filters:\n        { filterByName:\n          { ...filterByName },\n        filterByNumericValues:\n      [...removedFilter],\n        order: { ...order },\n        } });\n  };\n\n  const handleSortPlanets = (column, sort) => {\n    const { filters: { filterByName, filterByNumericValues } } = filter;\n    setFilter({\n      ...filter,\n      filters:\n      { filterByName:\n        { ...filterByName },\n      filterByNumericValues:\n    [...filterByNumericValues],\n      order: { column, sort } },\n    });\n  };\n\n  useEffect(() => {\n    const fetchPlanets = async () => {\n      setLoading(true);\n      const url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n      const response = await (await fetch(url)).json();\n      response.results.forEach(async (planet) => {\n        delete planet.residents;\n        delete planet.created;\n        delete planet.edited;\n        delete planet.url;\n        // const results = await Promise.all(planet.films.map((filmUrl) => {\n        //   const r = fetch(filmUrl).then((res) => res.json());\n        //   return r;\n        // }));\n        // planet.films = results;\n      });\n      setLoading(false);\n      setData({ ...response, results: response.results });\n    };\n\n    fetchPlanets();\n  }, []);\n\n  const context = {\n    data,\n    loading,\n    handleFilterByName,\n    filter,\n    handleFilterByNumericValues,\n    handleRemoveFilter,\n    handleSortPlanets,\n  };\n\n  return (\n    <tableContext.Provider value={ context }>\n      {children}\n    </tableContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default Provider;\n","import React from 'react';\nimport './App.css';\nimport Table from './components/Table';\nimport Provider from './context/Provider';\n\nfunction App() {\n  return (\n    <Provider>\n      <Table />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}